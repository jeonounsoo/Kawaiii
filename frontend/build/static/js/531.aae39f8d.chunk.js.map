{"version":3,"file":"static/js/531.aae39f8d.chunk.js","mappings":"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","sources":["shared/components/Card.js","shared/components/FormElements/ImageUpload.js","user/pages/Auth.js"],"sourcesContent":["import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n\r\n","import React, { useRef, useState, useEffect } from 'react';\r\n\r\nimport Button from './Button';\r\nimport './ImageUpload.css';\r\n\r\nconst ImageUpload = props => {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickedHandler = event => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n    if (event.target.files && event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        id={props.id}\r\n        ref={filePickerRef}\r\n        style={{ display: 'none' }}\r\n        type=\"file\"\r\n        accept=\".jpg,.png,.jpeg,.gif\"\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${props.center && 'center'}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please pick an image.</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          PICK IMAGE\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import React, { useState, useContext } from 'react';\r\n\r\nimport Card from '../../shared/components/Card';\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validator';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './Auth.css';\r\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\r\nimport LoadingSpinner from '../../shared/components/LoadingSpinner';\r\nimport ErrorModal from '../../shared/components/EroorModal';\r\nimport {useHttpClient} from '../../shared/hooks/http-hook'\r\n\r\nconst Auth = () => {\r\n  const auth = useContext(AuthContext);\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: '',\r\n        isValid: false\r\n      },\r\n      password: {\r\n        value: '',\r\n        isValid: false\r\n      }\r\n    },\r\n    false\r\n  );\r\n\r\n  const switchModeHandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: '',\r\n            isValid: false\r\n          },\r\n          image: {\r\n            value: null,\r\n            isValid: false\r\n          }\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode(prevMode => !prevMode);\r\n  };\r\n\r\n  const authSubmitHandler = async event => {\r\n    event.preventDefault();\r\n\r\n    if (isLoginMode) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + '/users/login',\r\n          'POST',\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value\r\n          }),\r\n          {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        );\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append('email', formState.inputs.email.value);\r\n        formData.append('name', formState.inputs.name.value);\r\n        formData.append('password', formState.inputs.password.value);\r\n        formData.append('image', formState.inputs.image.value);\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + '/users/signup',\r\n          'POST',\r\n          formData\r\n        );\r\n\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className=\"authentication\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h2>Login Required</h2>\r\n        <hr />\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              element=\"input\"\r\n              id=\"name\"\r\n              type=\"text\"\r\n              label=\"Your Name\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText=\"Please enter a name.\"\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          {!isLoginMode && (\r\n            <ImageUpload\r\n              center\r\n              id=\"image\"\r\n              onInput={inputHandler}\r\n              errorText=\"Please provide an image.\"\r\n            />\r\n          )}\r\n          <Input\r\n            element=\"input\"\r\n            id=\"email\"\r\n            type=\"email\"\r\n            label=\"E-Mail\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText=\"Please enter a valid email address.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            element=\"input\"\r\n            id=\"password\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText=\"Please enter a valid password, at least 6 characters.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchModeHandler}>\r\n          SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\r\n        </Button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n"],"names":["props","_jsx","className","concat","style","children","_useState","useState","_useState2","_slicedToArray","file","setFile","_useState3","_useState4","previewUrl","setPreviewUrl","_useState5","_useState6","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","_jsxs","id","ref","display","type","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","Button","onClick","current","click","errorText","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","_useHttpClient","useHttpClient","isLoading","error","sendRequest","clearError","_useForm","useForm","email","value","password","_useForm2","formState","inputHandler","setFormData","authSubmitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","responseData","formData","_responseData","wrap","_context","prev","next","preventDefault","process","JSON","stringify","inputs","sent","login","userId","token","t0","FormData","append","name","image","t1","stop","_x","apply","arguments","React","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","Input","element","label","validators","VALIDATOR_REQUIRE","ImageUpload","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","_objectSpread","undefined","prevMode"],"sourceRoot":""}